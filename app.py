# app.py
import numpy as np
import func.functions as api
import pandas as pd
import streamlit as st
import streamlit_pills as stp
from streamlit_folium import st_folium
from func import functions
import plotly.express as px
from xgboost import XGBClassifier

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Credit Card Analyses",
    page_icon="üïµÔ∏è",
    layout="wide",
)

# --- Estilos CSS ---
st.markdown("""
<style>
/* --- ESTILO BASE DO CARD --- */
.kpi-card {
    position: relative;
    background-color: #FFFFFF;
    padding: 20px;
    border: 0.5px solid #DDDDDD;
    border-radius: 10px;
    border-left: 8px solid #000;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
    height: 160px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    transition: all 0.3s ease;
    color: #333333;
}
.kpi-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
}
.kpi-card h3 { font-size: 1.1em; text-transform: uppercase; font-weight: 600; color: #666666; }
.kpi-card h2 { font-size: 2.1em; font-weight: bolder; color: #2A2A2A; }
.kpi-card.color-1 { border-left-color: #0d47a1; }
.kpi-card.color-2 { border-left-color: #2e7d32; }
.kpi-card.color-4 { border-left-color: #d84315; }
</style>
""", unsafe_allow_html=True)


# --- T√≠tulo Principal ---
st.title("üïµÔ∏è DASHBOARD DE AN√ÅLISE DE FRAUDES")

opcoes_menu = ["Vis√£o Geral","An√°lise Geogr√°fica", "Analise Exploratoria", "An√°lise Direcionada", "Resumo Estrat√©gico"]
icones_menu = ["üí°", "üó∫Ô∏è", "üî¨", "üéØ", "üèÜ"] 

if 'pagina_selecionada' not in st.session_state:
    st.session_state.pagina_selecionada = opcoes_menu[0]

pagina_atual = stp.pills(
    label="Navegue pelas fases do projeto:",
    options=opcoes_menu,
    icons=icones_menu,
    
    key="menu_navegacao",
    
    index=opcoes_menu.index(st.session_state.pagina_selecionada)
)

st.session_state.pagina_selecionada = pagina_atual

if pagina_atual == "Vis√£o Geral":
    st.header("üí° Resumo Executivo de Seguran√ßa e Opera√ß√µes")
    df_principal = api.carregar_dados()
    
    col1, col2 = st.columns(2)
    with col1:
        # Garante que o valor padr√£o n√£o cause erro se o df for vazio no primeiro carregamento
        data_minima = df_principal['Timestamp'].min().date() if not df_principal.empty else None
        data_inicio = st.date_input("Data de In√≠cio", data_minima)
    with col2:
        data_maxima = df_principal['Timestamp'].max().date() if not df_principal.empty else None
        data_fim = st.date_input("Data de Fim", data_maxima)
    
    if data_inicio and data_fim:
        data_inicio_dt = pd.to_datetime(data_inicio)
        # Adiciona 1 dia para incluir a data final na sele√ß√£o
        data_fim_dt = pd.to_datetime(data_fim) + pd.Timedelta(days=1)
        
        # Filtra o DataFrame com base no per√≠odo selecionado
        df_filtrado = df_principal[(df_principal['Timestamp'] >= data_inicio_dt) & (df_principal['Timestamp'] < data_fim_dt)]

        if df_filtrado.empty:
            st.warning("N√£o h√° dados para o per√≠odo selecionado.")
        else:
            # Calcula os KPIs com base nos dados filtrados
            kpis = api.calcular_kpis_gerais(df_filtrado)

            # --- ALTERADO: KPIs de volta para o formato HTML ---
        kpi1, kpi2, kpi3, kpi4 = st.columns(4)
        with kpi1:
                st.markdown(f"<div class='kpi-card color-1'><h3>Valor Total Transacionado</h3><h2>R$ {kpis['valor_total']:,.2f}</h2></div>", unsafe_allow_html=True)
        with kpi2:
                st.markdown(f"<div class='kpi-card color-4'><h3>Volume de Fraudes</h3><h2>{kpis['num_fraudes']:}</h2></div>", unsafe_allow_html=True)
        with kpi3:
                st.markdown(f"<div class='kpi-card color-4'><h3>Taxa de Fraude (%)</h3><h2>{kpis['taxa_fraude_vol']:.2f}%</h2></div>", unsafe_allow_html=True)
        with kpi4:
                st.markdown(f"<div class='kpi-card color-4'><h3>Valor Perdido</h3><h2>R$ {kpis['valor_fraudes']:,.2f}</h2></div>", unsafe_allow_html=True)

        st.divider()
        
        st.subheader("Tend√™ncia de Transa√ß√µes e Fraudes")
        
        @st.cache_data
        def criar_grafico_tendencia(df):
            df_diario = df.set_index('Timestamp').resample('D').agg(
                Total_Transacoes=('Transaction_ID', 'count'),
                Total_Fraudes=('Fraud_Label', 'sum')
            ).reset_index()
                
            fig = px.line(df_diario, x='Timestamp', y=['Total_Transacoes', 'Total_Fraudes'],
                              title="Transa√ß√µes Totais vs. Fraudes por Dia",
                              labels={'Timestamp': 'Data', 'value': 'N√∫mero de Transa√ß√µes'},
                              color_discrete_map={'Total_Transacoes': '#0d47a1', 'Total_Fraudes': '#d84315'})
            return fig

        fig_tendencia = criar_grafico_tendencia(df_filtrado)
        st.plotly_chart(fig_tendencia, use_container_width=True)
    else:
        st.error("Por favor, selecione uma data de in√≠cio e fim.")
        
elif pagina_atual == "An√°lise Geogr√°fica":
    df_principal = api.carregar_dados()
    st.header("üó∫Ô∏è An√°lise Geogr√°fica Agregada")
    st.info("Explore o volume e a taxa de fraude por localiza√ß√£o. O tamanho do c√≠rculo indica o volume de transa√ß√µes e a cor indica o risco de fraude.")
    
    col1, col2 = st.columns(2)
    with col1:
        tipos_transacao = ['Todos'] + sorted(df_principal['Transaction_Type'].unique())
        tipo_selecionado = st.selectbox("Filtrar por Tipo de Transa√ß√£o:", tipos_transacao)
    with col2:
        status_fraude = {'Todos': None, 'Apenas Fraudes': 1, 'Apenas Leg√≠timas': 0}
        status_selecionado_key = st.selectbox("Filtrar por Status:", options=list(status_fraude.keys()))
        status_selecionado_value = status_fraude[status_selecionado_key]

    # Aplica os filtros
    df_filtrado = df_principal.copy()
    if tipo_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Transaction_Type'] == tipo_selecionado]
    if status_selecionado_value is not None:
        df_filtrado = df_filtrado[df_filtrado['Fraud_Label'] == status_selecionado_value]

    # Chama a fun√ß√£o de mapa agregado
    mapa_agregado = api.criar_mapa_agregado_por_localizacao(df_filtrado)

    # ** LINHAS ADICIONADAS PARA EXIBIR O MAPA **
    if mapa_agregado:
        st_folium(mapa_agregado, use_container_width=True)
    else:
        # Mostra um aviso se n√£o houver dados ou se o mapa n√£o puder ser gerado
        st.warning("N√£o h√° dados para exibir com os filtros selecionados.")
    

elif pagina_atual == "Analise Exploratoria":
    
    st.header("üî¨ An√°lise Explorat√≥ria de Dados (EDA)")
    st.markdown("Esta √© a **funda√ß√£o** da nossa an√°lise. Aqui, fazemos um diagn√≥stico completo dos dados para entender suas caracter√≠sticas, distribui√ß√µes e rela√ß√µes iniciais.")
    
    # --- 1. CARREGAMENTO DOS DADOS ---
    df = functions.carregar_dados()
    
    if not df.empty:
        st.subheader("N√≠vel 1: A Vis√£o Geral do Dataset")
        
        st.markdown("### KPIs (Indicadores-Chave de Performance)")
        
        if 'Timestamp' in df.columns and pd.api.types.is_datetime64_any_dtype(df['Timestamp']) and not df['Timestamp'].empty:
            data_inicio = df['Timestamp'].min().strftime('%d/%m/%Y')
            data_fim = df['Timestamp'].max().strftime('%d/%m/%Y')
            st.info(f"Estas s√£o as m√©tricas essenciais que resumem o nosso banco de dados \n\nüìÖ **Per√≠odo em An√°lise:** de {data_inicio} a {data_fim}")
        
        col1, col2, col3, col4 = st.columns(4)
        
        # --- C√°lculo das m√©tricas ---
        total_transacoes = df.shape[0]
        total_variaveis = df.shape[1]
        total_fraudes = df['Fraud_Label'].sum()
        taxa_fraude = (total_fraudes / total_transacoes) * 100 if total_transacoes > 0 else 0
        
        with col1:
            st.markdown(f"""
            <div class='kpi-card color-1'>
                <h3>Total de Transa√ß√µes</h3>
                <h2>{total_transacoes:,}</h2>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
            <div class='kpi-card color-2'>
                <h3>Total de Vari√°veis</h3>
                <h2>{total_variaveis}</h2>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            st.markdown(f"""
            <div class='kpi-card color-3'>
                <h3>Total de Fraudes</h3>
                <h2>{total_fraudes:,}</h2>
            </div>
            """, unsafe_allow_html=True)

        with col4:
            st.markdown(f"""
            <div class='kpi-card color-4'>
                <h3>Taxa de Fraude</h3>
                <h2>{taxa_fraude:.2f}%</h2>
            </div>
            """, unsafe_allow_html=True)

        st.markdown("---")
        
        st.markdown("#### Detalhes T√©cnicos do Dataset")
        
        with st.expander("üëÅÔ∏è Visualizar Amostra dos Dados"):
            st.dataframe(df.head(10))
            st.caption("As 10 primeiras linhas do conjunto de dados.")

        with st.expander("üìä Visualizar Resumo Estat√≠stico (Colunas Num√©ricas)"):
            st.dataframe(df.describe())
            st.caption("Fornece insights como m√©dia, mediana e desvio padr√£o para cada vari√°vel num√©rica.")

        with st.expander("üìÑ Visualizar Estrutura e Tipos de Dados"):
            tipos_de_dados = pd.DataFrame(df.dtypes, columns=['Tipo de Dado']).reset_index().rename(columns={'index': 'Nome da Coluna'})
            st.dataframe(tipos_de_dados)
            st.caption("Lista de todas as colunas e seus respectivos tipos de dados.")
        
        st.markdown("---")
        
        st.subheader("N√≠vel 2: An√°lise Univariada (Perfil de Cada Vari√°vel)")
        st.markdown("Selecione uma vari√°vel para investigar suas caracter√≠sticas, distribui√ß√£o e outliers em detalhe.")
        
        colunas_numericas = df.select_dtypes(include=np.number).columns.tolist()
        colunas_categoricas = df.select_dtypes(include=['object', 'category']).columns.tolist()
        colunas_analisaveis = [col for col in df.columns if col != 'Fraud_Label']
        colunas_data = df.select_dtypes(include=['datetime', 'datetimetz', 'datetime64[ns]']).columns.tolist()
        
        coluna_selecionada = st.selectbox(
            "Selecione uma vari√°vel para uma an√°lise detalhada:",
            options = colunas_analisaveis,
            index=None,
            placeholder="Escolha uma var√≠avel..."
        )
        
        if coluna_selecionada:
            if coluna_selecionada in colunas_numericas:
                st.markdown(f"**Analisando a vari√°vel num√©rica:** `{coluna_selecionada}`")
                
                col_grafico, col_stats = st.columns([2, 1])
                
                with col_grafico:
                    fig = px.histogram(df, x=coluna_selecionada, marginal="box", title=f"Distruibui√ß√£o de '{coluna_selecionada}'")
                    st.plotly_chart(fig, use_container_width=True)
                with col_stats:
                    media = df[coluna_selecionada].mean()
                    mediana = df[coluna_selecionada].median()
                    desvio_pad = df[coluna_selecionada].std()
                    
                    q1 = df[coluna_selecionada].quantile(0.25)
                    q3 = df[coluna_selecionada].quantile(0.75)
                    iqr = q3 - q1
                    limite_inferior = q1 - 1.5 * iqr
                    limite_superior = q3 + 1.5 * iqr
                    outliers = df[(df[coluna_selecionada] < limite_inferior) | (df[coluna_selecionada] > limite_superior)]                    
                    
                    st.markdown(f"<div class='kpi-card color-1'><h3>M√©dia</h3><h2>{media:,.2f}</h2></div>", unsafe_allow_html=True)
                    st.markdown("<div style='height: 15px;'></div>", unsafe_allow_html=True)
                    st.markdown(f"<div class='kpi-card color-2'><h3>Mediana</h3><h2>{mediana:,.2f}</h2></div>", unsafe_allow_html=True)
                    st.markdown("<div style='height: 15px;'></div>", unsafe_allow_html=True)
                    st.markdown(f"<div class='kpi-card color-3'><h3>Desvio Padr√£o</h3><h2>{desvio_pad:,.2f}</h2></div>", unsafe_allow_html=True)
                    st.markdown("<div style='height: 15px;'></div>", unsafe_allow_html=True)
                    st.markdown(f"<div class='kpi-card color-4'><h3>N¬∫ de Outliers</h3><h2>{len(outliers):,}</h2></div>", unsafe_allow_html=True)
            
            elif coluna_selecionada in colunas_categoricas:
                st.markdown(f"**Analisando a vari√°vel categ√≥rica:** `{coluna_selecionada}`")
                
                col_grafico_cat, col_stats_cat = st.columns([2, 1])

                with col_grafico_cat:
                    contagem = df[coluna_selecionada].value_counts().nlargest(15).reset_index()
                    contagem.columns = [coluna_selecionada, 'Contagem']
                    fig = px.bar(contagem, x=coluna_selecionada, y='Contagem', title=f"Contagem das 15 categorias mais comuns em '{coluna_selecionada}'")
                    st.plotly_chart(fig, use_container_width=True)
                
                with col_stats_cat:
                    num_categorias = df[coluna_selecionada].nunique()
                    moda = df[coluna_selecionada].mode()[0]
                    
                    st.markdown(f"<div class='kpi-card color-1'><h3>N¬∫ de Categorias √önicas</h3><h2>{num_categorias:,}</h2></div>", unsafe_allow_html=True)
                    st.markdown("<div style='height: 15px;'></div>", unsafe_allow_html=True)
                    st.markdown(f"<div class='kpi-card color-2'><h3>Categoria Mais Comum (Moda)</h3><h2>{moda}</h2></div>", unsafe_allow_html=True)
            
            elif coluna_selecionada in colunas_data:
                st.markdown(f"**Analisando a vari√°vel de data/hora:** `{coluna_selecionada}`")
        
                st.info("Para vari√°veis de tempo, visualizamos a contagem de transa√ß√µes por dia.")
        
                transacoes_por_dia = df.set_index(coluna_selecionada).resample('D').size().reset_index(name='Contagem')
        
                fig = px.line(transacoes_por_dia, x=coluna_selecionada, y='Contagem',
                      title=f'Volume de Transa√ß√µes por Dia',
                      labels={'Contagem': 'N√∫mero de Transa√ß√µes', coluna_selecionada: 'Data'})
                st.plotly_chart(fig, use_container_width=True)
                
        st.subheader("N√≠vel 3: Investiga√ß√£o das Rela√ß√µes")
        st.markdown("Aqui, cruzamos as vari√°veis para encontrar padr√µes e rela√ß√µes, focando em como elas se conectam com a ocorr√™ncia de fraude.")
        
        st.markdown("#### Rela√ß√£o de Cada Vari√°vel com a Fraude")
        st.info("Selecione uma vari√°vel para ver como sua distribui√ß√£o difere entre transa√ß√µes normais e fraudulentas.")
        
        opcoes_bivariada = [col for col in df.columns if col != 'Fraud_Label']
        feature_to_compare = st.selectbox("Selecione uma vari√°vel para comparar:", opcoes_bivariada, key='bivariada_select')

        if feature_to_compare:
            # L√≥gica para Gr√°ficos Comparativos
            if feature_to_compare in colunas_numericas:
                fig = px.box(df, x='Fraud_Label', y=feature_to_compare, 
                             title=f"Distribui√ß√£o de '{feature_to_compare}' por Classe de Fraude",
                             labels={'Fraud_Label': '√â Fraude?'}, color='Fraud_Label',
                             color_discrete_map={0: '#636EFA', 1: '#EF553B'})
                st.plotly_chart(fig, use_container_width=True)
            elif feature_to_compare in colunas_categoricas:
                # Usando abas para mostrar contagem absoluta e relativa
                tab1, tab2 = st.tabs(["Contagem Absoluta", "Propor√ß√£o Relativa (%)"])
                with tab1:
                    fig_abs = px.histogram(df, x=feature_to_compare, color='Fraud_Label', 
                                           barmode='group', title=f"Contagem de '{feature_to_compare}' por Classe de Fraude")
                    st.plotly_chart(fig_abs, use_container_width=True)
                with tab2:
                    fig_rel = px.histogram(df, x=feature_to_compare, color='Fraud_Label', 
                                           barmode='relative', title=f"Propor√ß√£o de Fraude em '{feature_to_compare}'",
                                           histnorm='percent')
                    st.plotly_chart(fig_rel, use_container_width=True)
            # --- 3.2 Mapa de Calor de Correla√ß√£o ---
        st.markdown("#### Mapa de Calor de Correla√ß√£o")
        st.info("Mostra como as vari√°veis num√©ricas se relacionam entre si. Valores pr√≥ximos de 1 (vermelho) ou -1 (azul) indicam forte correla√ß√£o.")
        
        corr_matrix = df.corr(numeric_only=True)
        fig_corr = px.imshow(corr_matrix, text_auto=".2f", aspect="auto", 
                             title="Mapa de Calor de Correla√ß√£o", color_continuous_scale='RdBu_r')
        st.plotly_chart(fig_corr, use_container_width=True)

        st.markdown("---")
        st.subheader("An√°lise de Import√¢ncia de Vari√°veis com XGBoost")
        
        def preparar_dados_para_modelo(df):
            df_processado = pd.get_dummies(df.drop(columns=['Transaction_ID', 'User_ID', 'Timestamp']))
            X = df_processado.drop(columns='Fraud_Label')
            y = df_processado['Fraud_Label']
            
            return X, y
        
        def treinar_modelo_xgboost_e_obter_importancias(df):
            X, y = preparar_dados_para_modelo(df)
            
            model = XGBClassifier(n_estimators=100, random_state=42, use_label_encoder=False, eval_metric='logloss')
            model.fit(X, y)
            
            importancias = pd.DataFrame({
                'Variavel': X.columns,
                'Importancia': model.feature_importances_
            }).sort_values(by='Importancia', ascending=False)
            
            return importancias
        
        with st.spinner("Treinando modelo XGBoost para analisar as vari√°veis..."):
            df_importancias = treinar_modelo_xgboost_e_obter_importancias(df)
        
        #st.success("An√°lise de import√¢ncia com XGBoost conclu√≠da!")

        top_20_features = df_importancias.head(20)

        fig_importancia = px.bar(
            top_20_features,
            x='Importancia',
            y='Variavel',
            orientation='h',
            title='As 20 Vari√°veis Mais Importantes (An√°lise com XGBoost)',
            labels={'Importancia': 'N√≠vel de Import√¢ncia (Score)', 'Variavel': 'Vari√°vel'},
            height=600
        )
        fig_importancia.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_importancia, use_container_width=True)
        
            
elif pagina_atual == "An√°lise Direcionada":
    st.header("üéØ An√°lise Direcionada de Fraude")
    st.markdown(
        "Ap√≥s as descobertas da An√°lise Explorat√≥ria, focamos esta investiga√ß√£o nas vari√°veis que o modelo "
        "XGBoost apontou como as mais importantes. Vamos aprofundar nosso entendimento sobre os verdadeiros "
        "indicadores de risco."
    )
    
    # --- Carregamento dos dados ---
    @st.cache_data
    def carregar_dados_direcionados():
        df = api.carregar_dados()
        df['Timestamp'] = pd.to_datetime(df['Timestamp'])
        return df

    df = carregar_dados_direcionados()
    
    st.divider()

    # --- NOVA Hip√≥tese 1: A Anatomia do "Card Testing" ---
    st.subheader("Hip√≥tese 1: Qual o padr√£o exato das transa√ß√µes falhas?")
    st.markdown(
        "O `Failed_Transaction_Count_7d` foi o fator mais importante. Este gr√°fico mostra a distribui√ß√£o "
        "dessa vari√°vel **apenas para as transa√ß√µes que foram confirmadas como fraude**, revelando o "
        "comportamento exato do fraudador."
    )
    
    df_fraudes = df[df['Fraud_Label'] == 1]
    
    fig_falhas = px.histogram(
        df_fraudes,
        x='Failed_Transaction_Count_7d',
        title='Distribui√ß√£o de Falhas Anteriores em Transa√ß√µes Fraudulentas',
        labels={'Failed_Transaction_Count_7d': 'N¬∫ de Transa√ß√µes Falhas nos √öltimos 7 Dias'},
        text_auto=True # Mostra a contagem em cima das barras
    )
    fig_falhas.update_layout(yaxis_title="Contagem de Fraudes")
    st.plotly_chart(fig_falhas, use_container_width=True)
    st.info(
        "üí° **Insight:** O gr√°fico confirma a teoria do 'card testing'. A grande maioria das fraudes ocorre ap√≥s "
        "exatamente **3 ou 4 tentativas falhas**, sugerindo um padr√£o de ataque automatizado e previs√≠vel."
    )

    st.divider()

    st.subheader("üî¨ An√°lise Profunda do Risk Score: O Indicador Principal")
    st.markdown(
        "Vimos que o `Risk_Score` √© uma das vari√°veis mais importantes. Para visualizar de forma simples "
        "como ele separa as transa√ß√µes, vamos sobrepor os histogramas das duas classes (fraude e n√£o-fraude)."
    )

    # Usamos um histograma com sobreposi√ß√£o para comparar as distribui√ß√µes
    fig_risk_hist = px.histogram(
        df,
        x="Risk_Score",
        color="Fraud_Label",
        barmode='overlay',
        histnorm='probability density', # Normaliza para comparar as formas das distribui√ß√µes
        opacity=0.6, # Adiciona transpar√™ncia para ver a sobreposi√ß√£o
        title="Distribui√ß√£o da Pontua√ß√£o de Risco por Classe de Fraude",
        labels={'Risk_Score': 'Pontua√ß√£o de Risco', 'Fraud_Label': '√â Fraude?'},
        color_discrete_map={0: '#636EFA', 1: '#EF553B'}
    )

    fig_risk_hist.update_layout(
        yaxis_title="Densidade",
        legend_title_text='√â Fraude?'
    )
    st.plotly_chart(fig_risk_hist, use_container_width=True)

    st.info(
        """
        üí° **Insight:** Este gr√°fico simplificado mostra a mesma hist√≥ria de forma direta:
        - **A "montanha" azul (Leg√≠timas)** est√° quase inteiramente concentrada √† esquerda, em valores de `Risk_Score` muito baixos.
        - **A "montanha" vermelha (Fraudes)** est√° claramente deslocada para a direita, concentrada em valores de `Risk_Score` altos.
        
        A pequena √°rea roxa, onde as duas distribui√ß√µes se cruzam, representa a "zona de confus√£o", onde a decis√£o √© mais dif√≠cil. A clara separa√ß√£o entre os picos das duas "montanhas" confirma visualmente o imenso poder preditivo desta vari√°vel.
        """
    )

elif pagina_atual == "Resumo Estrat√©gico":
    st.header("üèÜ Resumo Estrat√©gico e Recomenda√ß√µes Finais")
    st.markdown(
        "Esta se√ß√£o consolida as descobertas finais do projeto. Ap√≥s uma an√°lise iterativa, "
        "identificamos os verdadeiros vetores de fraude e descartamos as hip√≥teses que se provaram "
        "irrelevantes, resultando em um perfil de risco claro e em recomenda√ß√µes estrat√©gicas focadas."
    )
    st.divider()
    
    
    st.subheader("Principais Fatores de Risco e Considera√ß√µes")
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(
            """
            <div class='kpi-card color-4' style='height: 240px;'>
                <h3>üë£ RASTRO COMPORTAMENTAL</h3>
                <h2>Testes de Cart√£o</h2>
                <p style='font-size: 0.9em;'>O n√∫mero de falhas recentes √© o indicador #1. Um usu√°rio com 3+ falhas em 7 dias representa um alerta m√°ximo de fraude iminente.</p>
            </div>
            """, unsafe_allow_html=True)

    with col2:
        st.markdown(
            """
            <div class='kpi-card color-3' style='height: 240px;'>
                <h3>üö® SUPER-SINAL DE RISCO</h3>
                <h2>Risk Score Elevado</h2>
                <p style='font-size: 0.9em;'>Sendo o indicador #2, esta vari√°vel sint√©tica √© extremamente eficaz, mas sua origem deve ser conhecida para evitar data leakage.</p>
            </div>
            """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(
            """
            <div class='kpi-card color-1' style='height: 240px;'>
                <h3>üìâ RISCO E DEPEND√äNCIA</h3>
                <h2>Concentra√ß√£o de Risco</h2>
                <p style='font-size: 0.9em;'>A forte depend√™ncia em apenas 2 vari√°veis √© eficiente, mas arriscada. O sistema pode ser vulner√°vel a novos tipos de fraude n√£o capturados por elas.</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.divider()

    st.subheader("O 'Retrato Falado' da Fraude")
    with st.container(border=True):
        st.markdown("""
        A an√°lise revelou um perfil de fraude com caracter√≠sticas muito espec√≠ficas, que se concentram mais no **comportamento pr√©vio** do que no contexto da transa√ß√£o em si:

        - **A Impress√£o Digital do Fraudador:** O sinal mais forte de uma fraude iminente √© o comportamento de **'card testing'**. A grande maioria das fraudes √© precedida por um n√∫mero elevado de transa√ß√µes falhas recentes (`Failed_Transaction_Count_7d`), tipicamente entre 3 e 4 falhas.

        - **O Super-Sinal de Risco:** Quase toda transa√ß√£o fraudulenta carrega consigo uma alta **`Pontua√ß√£o de Risco` (`Risk_Score`)**. Esta vari√°vel, provavelmente derivada de um outro modelo, age como um condensador de informa√ß√µes e √© o segundo indicador mais poderoso.
        
        - **Fatores Secund√°rios:** Caracter√≠sticas como o valor da transa√ß√£o e o hor√°rio, ao contr√°rio da intui√ß√£o inicial, provaram ter **baixa ou nenhuma relev√¢ncia preditiva** isoladamente.
        """)

    st.divider()

    st.subheader("Recomenda√ß√µes Acion√°veis para o Neg√≥cio")

    with st.expander("**A√ß√£o 1: Implementar Monitoramento de 'Card Testing' em Tempo Real**"):
        st.markdown("""
        **A Descoberta:** O n√∫mero de transa√ß√µes falhas recentes √© o indicador mais poderoso de fraude.
        
        **A Solu√ß√£o Sugerida:**
        - Criar regras de neg√≥cio que monitorem ativamente a contagem de falhas por cart√£o ou usu√°rio em janelas curtas de tempo (ex: √∫ltima hora, √∫ltimas 24h).
        - Ap√≥s um limiar ser atingido (ex: 3 falhas), o sistema deve automaticamente aplicar mais fric√ß√£o (ex: exigir autentica√ß√£o de dois fatores - OTP) ou at√© mesmo bloquear temporariamente o cart√£o para novas tentativas, notificando o cliente.
        """)

    with st.expander("**A√ß√£o 2: Validar e Operacionalizar o `Risk_Score` com Cautela**"):
        st.markdown("""
        **A Observa√ß√£o:** O `Risk_Score` √© um "super-sinal", mas sua natureza de "caixa-preta" representa um risco de **vazamento de dados (data leakage)** se n√£o for bem compreendido.
        
        **A Solu√ß√£o Sugerida:**
        - **Auditoria:** Antes de usar este score em produ√ß√£o, √© crucial auditar sua origem. A equipe deve garantir que ele seja calculado com dados dispon√≠veis **antes** da transa√ß√£o ser aprovada e que n√£o contenha informa√ß√µes sobre o resultado final da fraude.
        - **Operacionaliza√ß√£o:** Se validado, ele deve ser o principal crit√©rio para priorizar revis√µes manuais e para regras de bloqueio autom√°tico de transa√ß√µes com scores extremos (ex: > 0.95).
        """)

    with st.expander("**A√ß√£o 3: Diversificar Fontes de Dados para Aumentar a Robustez**"):
        st.markdown("""
        **O Risco:** Depender de apenas duas vari√°veis torna o sistema vulner√°vel a novos tipos de fraude que n√£o exibam esses dois sinais espec√≠ficos.
        
        **A Solu√ß√£o Sugerida:**
        - **Engenharia de Features:** Priorizar, em futuras itera√ß√µes, a cria√ß√£o de novas vari√°veis. Exemplos: "tempo desde a √∫ltima transa√ß√£o", "frequ√™ncia de uso de um novo dispositivo", "rela√ß√£o do valor da transa√ß√£o com a m√©dia hist√≥rica do usu√°rio".
        - **An√°lise sem Super-Sinais:** Realizar uma nova rodada de an√°lise **excluindo** `Risk_Score` e `Failed_Transaction_Count_7d` para for√ßar a descoberta de sinais secund√°rios mais sutis, que podem ser √∫teis para capturar fraudes mais sofisticadas.
        """)